{"version":3,"sources":["HomePage/components/form/index.js","HomePage/components/card/index.js","HomePage/index.js","App.js","index.js"],"names":["currentYear","Date","getFullYear","monthsArr","Array","from","length","x","i","month","yearsArr","_x","Form","_ref","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvv","children","_useState","useState","_useState2","_slicedToArray","cardNumber","setCardNumber","handleFormChange","event","_event$target","target","name","value","_jsxs","className","_jsx","htmlFor","type","autoComplete","onChange","_event$target2","replace","test","trimRight","maxLength","ref","onFocus","e","onBlur","disabled","map","val","index","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","concat","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","style","setStyle","useCardType","useMemo","re","number","_i","_Object$entries","Object","entries","_Object$entries$_i","card","pattern","RegExp","match","cardType","useEffect","element","current","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","alt","src","onClick","TransitionGroup","component","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","classNames","timeout","SwitchTransition","toString","substr","initialState","HomePage","state","setState","_useState3","_useState4","setCurrentFocusedElm","updateStateValues","useCallback","keyName","_objectSpread","_defineProperty","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","key","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61cf9402.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\nconst currentYear = new Date().getFullYear();\r\nconst monthsArr = Array.from({ length: 12 }, (x, i) => {\r\n    const month = i + 1;\r\n    return month <= 9 ? '0' + month : month;\r\n});\r\nconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\r\n\r\nexport default function Form({\r\n    cardMonth,\r\n    cardYear,\r\n    onUpdateState,\r\n    cardNumberRef,\r\n    cardHolderRef,\r\n    cardDateRef,\r\n    onCardInputFocus,\r\n    onCardInputBlur,\r\n    cardCvv,\r\n    children\r\n}) {\r\n    const [cardNumber, setCardNumber] = useState('');\r\n\r\n    const handleFormChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        onUpdateState(name, value);\r\n    };\r\n\r\n    // TODO: We can improve the regex check with a better approach like in the card component.\r\n    const onCardNumberChange = (event) => {\r\n        let { value, name } = event.target;\r\n        let cardNumber = value;\r\n        value = value.replace(/\\D/g, '');\r\n        if (/^3[47]\\d{0,13}$/.test(value)) {\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\r\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\r\n            // diner's club, 14 digits\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\r\n        } else if (/^\\d{0,16}$/.test(value)) {\r\n            // regular cc number, 16 digits\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\r\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\r\n        }\r\n\r\n        setCardNumber(cardNumber.trimRight());\r\n        onUpdateState(name, cardNumber);\r\n    };\r\n\r\n    const onCvvFocus = (event) => {\r\n        onUpdateState('isCardFlipped', true);\r\n    };\r\n\r\n    const onCvvBlur = (event) => {\r\n        onUpdateState('isCardFlipped', false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card-form\">\r\n            <div className=\"card-list\">{children}</div>\r\n            <div className=\"card-form__inner\">\r\n                <div className=\"card-input\">\r\n                    <label htmlFor=\"cardNumber\" className=\"card-input__label\">\r\n                        Card Number\r\n                    </label>\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"cardNumber\"\r\n                        className=\"card-input__input\"\r\n                        autoComplete=\"off\"\r\n                        onChange={onCardNumberChange}\r\n                        maxLength=\"19\"\r\n                        ref={cardNumberRef}\r\n                        onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\r\n                        onBlur={onCardInputBlur}\r\n                        value={cardNumber}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"card-input\">\r\n                    <label htmlFor=\"cardName\" className=\"card-input__label\">\r\n                        Card Holder\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"card-input__input\"\r\n                        autoComplete=\"off\"\r\n                        name=\"cardHolder\"\r\n                        onChange={handleFormChange}\r\n                        ref={cardHolderRef}\r\n                        onFocus={(e) => onCardInputFocus(e, 'cardHolder')}\r\n                        onBlur={onCardInputBlur}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"card-form__row\">\r\n                    <div className=\"card-form__col\">\r\n                        <div className=\"card-form__group\">\r\n                            <label\r\n                                htmlFor=\"cardMonth\"\r\n                                className=\"card-input__label\"\r\n                            >\r\n                                Expiration Date\r\n                            </label>\r\n                            <select\r\n                                className=\"card-input__input -select\"\r\n                                value={cardMonth}\r\n                                name=\"cardMonth\"\r\n                                onChange={handleFormChange}\r\n                                ref={cardDateRef}\r\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\r\n                                onBlur={onCardInputBlur}\r\n                            >\r\n                                <option value=\"\" disabled>\r\n                                    Month\r\n                                </option>\r\n\r\n                                {monthsArr.map((val, index) => (\r\n                                    <option key={index} value={val}>\r\n                                        {val}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <select\r\n                                name=\"cardYear\"\r\n                                className=\"card-input__input -select\"\r\n                                value={cardYear}\r\n                                onChange={handleFormChange}\r\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\r\n                                onBlur={onCardInputBlur}\r\n                            >\r\n                                <option value=\"\" disabled>\r\n                                    Year\r\n                                </option>\r\n\r\n                                {yearsArr.map((val, index) => (\r\n                                    <option key={index} value={val}>\r\n                                        {val}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-form__col -cvv\">\r\n                        <div className=\"card-input\">\r\n                            <label\r\n                                htmlFor=\"cardCvv\"\r\n                                className=\"card-input__label\"\r\n                            >\r\n                                CVV\r\n                            </label>\r\n                            <input\r\n                                type=\"tel\"\r\n                                className=\"card-input__input\"\r\n                                maxLength=\"4\"\r\n                                autoComplete=\"off\"\r\n                                name=\"cardCvv\"\r\n                                onChange={handleFormChange}\r\n                                onFocus={onCvvFocus}\r\n                                onBlur={onCvvBlur}\r\n                                ref={cardCvv}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n    CSSTransition,\r\n    TransitionGroup,\r\n    SwitchTransition\r\n} from 'react-transition-group';\r\nimport './styles.scss';\r\n\r\nconst CARDS = {\r\n    visa: '^4',\r\n    amex: '^(34|37)',\r\n    mastercard: '^5[1-5]',\r\n    discover: '^6011',\r\n    unionpay: '^62',\r\n    troy: '^9792',\r\n    diners: '^(30[0-5]|36)'\r\n};\r\n\r\nconst cardBackgroundName = () => {\r\n    let random = Math.floor(Math.random() * 25 + 1);\r\n    return `${random}.jpeg`;\r\n};\r\n\r\nconst BACKGROUND_IMG = cardBackgroundName();\r\n\r\nconst Card = ({\r\n    cardHolder,\r\n    cardNumber,\r\n    cardMonth,\r\n    cardYear,\r\n    cardCvv,\r\n    isCardFlipped,\r\n    currentFocusedElm,\r\n    onCardElementClick,\r\n    cardNumberRef,\r\n    cardHolderRef,\r\n    cardDateRef\r\n}) => {\r\n    const [style, setStyle] = useState(null);\r\n\r\n    const cardType = (cardNumber) => {\r\n        const number = cardNumber;\r\n        let re;\r\n        for (const [card, pattern] of Object.entries(CARDS)) {\r\n            re = new RegExp(pattern);\r\n            if (number.match(re) != null) {\r\n                return card;\r\n            }\r\n        }\r\n\r\n        return 'visa'; // default type\r\n    };\r\n\r\n    const useCardType = useMemo(() => {\r\n        return cardType(cardNumber);\r\n    }, [cardNumber]);\r\n\r\n    const outlineElementStyle = (element) => {\r\n        return element\r\n            ? {\r\n                  width: `${element.offsetWidth}px`,\r\n                  height: `${element.offsetHeight}px`,\r\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\r\n              }\r\n            : null;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentFocusedElm) {\r\n            const style = outlineElementStyle(currentFocusedElm.current);\r\n            setStyle(style);\r\n        }\r\n    }, [currentFocusedElm]);\r\n\r\n    const maskCardNumber = (cardNumber) => {\r\n        let cardNumberArr = cardNumber.split('');\r\n        cardNumberArr.forEach((val, index) => {\r\n            if (index > 4 && index < 14) {\r\n                if (cardNumberArr[index] !== ' ') {\r\n                    cardNumberArr[index] = '*';\r\n                }\r\n            }\r\n        });\r\n\r\n        return cardNumberArr;\r\n    };\r\n\r\n    return (\r\n        <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\r\n            <div className=\"card-item__side -front\">\r\n                <div\r\n                    className={`card-item__focus ${\r\n                        currentFocusedElm ? `-active` : ``\r\n                    }`}\r\n                    style={style}\r\n                />\r\n                <div className=\"card-item__cover\">\r\n                    <img\r\n                        alt=\"\"\r\n                        src={`/card-background/${BACKGROUND_IMG}`}\r\n                        className=\"card-item__bg\"\r\n                    />\r\n                </div>\r\n                <div className=\"card-item__wrapper\">\r\n                    <div className=\"card-item__top\">\r\n                        <img\r\n                            src={'/chip.png'}\r\n                            alt=\"\"\r\n                            className=\"card-item__chip\"\r\n                        />\r\n                        <div className=\"card-item__type\">\r\n                            <img\r\n                                alt={useCardType}\r\n                                src={`/card-type/${useCardType}.png`}\r\n                                className=\"card-item__typeImg\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <label \r\n                        className=\"card-item__number\"\r\n                        ref={cardNumberRef}\r\n                        onClick={() => onCardElementClick('cardNumber')}\r\n                    >\r\n                        <TransitionGroup\r\n                            className=\"slide-fade-up\"\r\n                            component=\"div\"\r\n                        >\r\n                            {cardNumber ? (\r\n                                maskCardNumber(cardNumber).map((val, index) => (\r\n                                    <CSSTransition\r\n                                        classNames=\"slide-fade-up\"\r\n                                        timeout={250}\r\n                                        key={index}\r\n                                    >\r\n                                        <div className=\"card-item__numberItem\">{val}</div>\r\n                                    </CSSTransition>\r\n                                ))\r\n                            ):(\r\n                                <CSSTransition\r\n                                    classNames=\"slide-fade-up\"\r\n                                    timeout={250}\r\n                                >\r\n                                    <div className=\"card-item__numberItem\">#</div>\r\n                                </CSSTransition>\r\n                            )}\r\n                        </TransitionGroup>\r\n                    </label>\r\n\r\n                    <div className=\"card-item__content\">\r\n                        <label\r\n                            className=\"card-item__info\"\r\n                            onClick={() => onCardElementClick('cardHolder')}\r\n                            ref={cardHolderRef}\r\n                        >\r\n                            <div className=\"card-item__holder\">Card Holder</div>\r\n                            <div className=\"card-item__name\">\r\n                                <TransitionGroup\r\n                                    className=\"slide-fade-up\"\r\n                                    component=\"div\"\r\n                                >\r\n                                    {cardHolder === 'FULL NAME' ? (\r\n                                        <CSSTransition\r\n                                            classNames=\"slide-fade-up\"\r\n                                            timeout={250}\r\n                                        >\r\n                                            <div>FULL NAME</div>\r\n                                        </CSSTransition>\r\n                                    ):(\r\n                                        cardHolder\r\n                                        .split('')\r\n                                        .map((val, index) => (\r\n                                            <CSSTransition\r\n                                                timeout={250}\r\n                                                classNames=\"slide-fade-right\"\r\n                                                key={index}\r\n                                            >\r\n                                                <span className=\"card-item__nameItem\">\r\n                                                    {val}\r\n                                                </span>\r\n                                            </CSSTransition>\r\n                                        ))\r\n                                    )}\r\n                                </TransitionGroup>\r\n                            </div>\r\n                        </label>\r\n                        <div\r\n                            className=\"card-item__date\"\r\n                            onClick={() => onCardElementClick('cardDate')}\r\n                            ref={cardDateRef}\r\n                        >\r\n                            <label className=\"card-item__dateTitle\">\r\n                                Expires\r\n                            </label>\r\n                            <label className=\"card-item__dateItem\">\r\n                                <SwitchTransition in-out>\r\n                                    <CSSTransition\r\n                                        classNames=\"slide-fade-up\"\r\n                                        timeout={200}\r\n                                        key={cardMonth}\r\n                                    >\r\n                                        <span>\r\n                                            {!cardMonth ? 'MM' : cardMonth}{' '}\r\n                                        </span>\r\n                                    </CSSTransition>\r\n                                </SwitchTransition>\r\n                            </label>\r\n                            /\r\n                            <label\r\n                                htmlFor=\"cardYear\"\r\n                                className=\"card-item__dateItem\"\r\n                            >\r\n                                <SwitchTransition in-out>\r\n                                    <CSSTransition\r\n                                        classNames=\"slide-fade-up\"\r\n                                        timeout={200}\r\n                                        key={cardYear}\r\n                                    >\r\n                                        <span>\r\n                                            {!cardYear\r\n                                                ? 'YY'\r\n                                                : cardYear\r\n                                                    .toString()\r\n                                                    .substr(-2)}\r\n                                        </span>\r\n                                    </CSSTransition>\r\n                                </SwitchTransition>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card-item__side -back\">\r\n                <div className=\"card-item__cover\">\r\n                    <img\r\n                        alt=\"\"\r\n                        src={`/card-background/${BACKGROUND_IMG}`}\r\n                        className=\"card-item__bg\"\r\n                    />\r\n                </div>\r\n                <div className=\"card-item__band\" />\r\n                <div className=\"card-item__cvv\">\r\n                    <div className=\"card-item__cvvTitle\">CVV</div>\r\n                    <div className=\"card-item__cvvBand\">\r\n                        <TransitionGroup>\r\n                            {cardCvv.split('').map((val, index) => (\r\n                                <CSSTransition\r\n                                    classNames=\"zoom-in-out\"\r\n                                    key={index}\r\n                                    timeout={250}\r\n                                >\r\n                                    <span>*</span>\r\n                                </CSSTransition>\r\n                            ))}\r\n                        </TransitionGroup>\r\n                    </div>\r\n                    <div className=\"card-item__type\">\r\n                        <img\r\n                            alt=\"card-type\"\r\n                            src={'/card-type/visa.png'}\r\n                            className=\"card-item__typeImg\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport Form from './components/form';\r\nimport Card from './components/card';\r\n\r\nconst initialState = {\r\n    cardNumber: '#### #### #### ####',\r\n    cardHolder: 'FULL NAME',\r\n    cardMonth: '',\r\n    cardYear: '',\r\n    cardCvv: '',\r\n    isCardFlipped: false\r\n};\r\n\r\nconst HomePage = () => {\r\n    const [state, setState] = useState(initialState);\r\n    const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\r\n\r\n    const updateStateValues = useCallback(\r\n        (keyName, value) => {\r\n            setState({\r\n                ...state,\r\n                [keyName]: value || initialState[keyName]\r\n            });\r\n        },\r\n        [state]\r\n    );\r\n\r\n    // References for the Form Inputs used to focus corresponding inputs.\r\n    let formFieldsRefObj = {\r\n        cardNumber: useRef(),\r\n        cardHolder: useRef(),\r\n        cardDate: useRef(),\r\n        cardCvv: useRef()\r\n    };\r\n\r\n    let focusFormFieldByKey = useCallback((key) => {\r\n        formFieldsRefObj[key].current.focus();\r\n    });\r\n\r\n    // This are the references for the Card DIV elements.\r\n    let cardElementsRef = {\r\n        cardNumber: useRef(),\r\n        cardHolder: useRef(),\r\n        cardDate: useRef()\r\n    };\r\n\r\n    let onCardFormInputFocus = (_event, inputName) => {\r\n        const refByName = cardElementsRef[inputName];\r\n        setCurrentFocusedElm(refByName);\r\n    };\r\n\r\n    let onCardInputBlur = useCallback(() => {\r\n        setCurrentFocusedElm(null);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Form\r\n                cardMonth={state.cardMonth}\r\n                cardYear={state.cardYear}\r\n                onUpdateState={updateStateValues}\r\n                cardNumberRef={formFieldsRefObj.cardNumber}\r\n                cardHolderRef={formFieldsRefObj.cardHolder}\r\n                cardDateRef={formFieldsRefObj.cardDate}\r\n                onCardInputFocus={onCardFormInputFocus}\r\n                onCardInputBlur={onCardInputBlur}\r\n            >\r\n                <Card\r\n                    cardNumber={state.cardNumber}\r\n                    cardHolder={state.cardHolder}\r\n                    cardMonth={state.cardMonth}\r\n                    cardYear={state.cardYear}\r\n                    cardCvv={state.cardCvv}\r\n                    isCardFlipped={state.isCardFlipped}\r\n                    currentFocusedElm={currentFocusedElm}\r\n                    onCardElementClick={focusFormFieldByKey}\r\n                    cardNumberRef={cardElementsRef.cardNumber}\r\n                    cardHolderRef={cardElementsRef.cardHolder}\r\n                    cardDateRef={cardElementsRef.cardDate}\r\n                ></Card>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\nimport './App.scss';\nimport HomePage from './HomePage';\n\nfunction App() {\n  return <HomePage/>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}